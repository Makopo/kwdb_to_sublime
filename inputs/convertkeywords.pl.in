use Regexp::Assemble;
use Text::Template;
  
my $ra = Regexp::Assemble->new;
<<< LSL CONSTANTS >>>
my $constants = $ra->as_string;

$ra = Regexp::Assemble->new;
<<< LSL FUNCTIONS >>>
my $functions = $ra->as_string;

$ra = Regexp::Assemble->new;
<<< LSL EVENTS >>>
my $events = $ra->as_string;

$ra = Regexp::Assemble->new;
<<< LSL INVALIDS >>>
my $invalids = $ra->as_string;

my $template = Text::Template->new(SOURCE => 'inputs/LSL.tmLanguage.tmpl')
  or die "Couldn't construct template: $Text::Template::ERROR";

my %vars = (valid_constants => $constants,
            valid_functions => $functions,
            valid_events => $events,
            invalids => $invalids);
my $result = $template->fill_in(HASH => \%vars, DELIMITERS => [ '[@--', '--@]' ]);
if (defined $result) { print $result }
else { die "Couldn't fill in template: $Text::Template::ERROR" }
