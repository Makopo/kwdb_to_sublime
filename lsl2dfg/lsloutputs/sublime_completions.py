#!/usr/bin/env python

# sublime.py - This is a LSL2dfg.py output module that outputs all the
# functions, events and constants in the database with their signatures,
# types and values.

import sys

def output(document, defaultdescs, databaseversion, infilename, outfilename, lang, tag):

  version = "0.0.20130526000"

  def print_function(element):

    func = "\t\t{ \"trigger\": \"" + element["name"] + "\", \"contents\": \"" + element["name"] + "("
    first = True
    if "params" in element:
      cnt = 1;
      for param in element["params"]:
        if first:
          first = False
        else:
          func = func + ", "
        func = func + "${" + str(cnt) + ":" + param["type"] + " " + param["name"] + "}"
        cnt += 1;
    func = func + ")\" }"

    outf.write(func.encode('utf8'))


  functions = []
  constants = []
  for element in document:
    if 'status' not in element or element['status'] == 'normal':
      if element["cat"] == "function":
        functions.append(element)
      elif element["cat"] == "constant":
        constants.append(element)

  functions.sort(lambda x,y: cmp(x["name"],y["name"]))
  constants.sort(lambda x,y: cmp(x["name"],y["name"]))

  if infilename is not None:
    inf = open(infilename, "r")
  else:
    inf = sys.stdin

  try:
    inputlines = inf.readlines()

  finally:
    if infilename is not None:
      inf.close()

  if outfilename is not None:
    outf = open(outfilename, "w")
  else:
    outf = sys.stdout

  try:

    for line in inputlines:
      if not line.startswith("<<< %s KEYWORDS >>>" % tag):
        outf.write(line)
      else:
        outf.write("// Generated by LSL2 Derived Files Generator. Database version: %s; output module version: %s\n"
          % (databaseversion, version))

        for element in constants:
          val = element['value']
          if element['type'] in ('string', 'key'):
            val = '"' + val.replace('\\', '\\\\').replace('\n', '\\n').replace('"', '\\"') + '"'

          outf.write(('\t\t"%s",\n' % (element['name'])).encode('utf8'))

        first = True
        for element in functions:
          if first:
            first = False
          else:
            outf.write(",\n")
          print_function(element)
        outf.write("\n")

  finally:
    if outfilename is not None:
      outf.close()

pass
