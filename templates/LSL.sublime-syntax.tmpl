%YAML 1.2
---

# NOTE:   Following definitions are taken from kwdb (https://bitbucket.org/Sei_Lisa/kwdb).
#         Should you have any question about the avoid/event/function/constant
#         definitions, please check with the kwdb project and contact the kwdb
#         maintainer first. If kwdb have updated their database version and mine is
#         still old, please let me know.

# Generated by LSL2 Derived Files Generator. Database version: [@--$version--@]

name: LSL
file_extensions:
  - lsl
scope: source.lsl
contexts:
  main:
    - include: value
  array:
    - match: '\['
      captures:
        0: punctuation.definition.array.begin.lsl
      push:
        - meta_scope: meta.inarray.lsl
        - match: '\]'
          captures:
            0: punctuation.definition.array.end.lsl
          pop: true
        - include: infunc
  avoid:
    - match: '\b[@--$invalids--@]\b'
      scope: invalid.deprecated.lsl
  begin_end:
    - match: '\{'
      push:
        - meta_scope: meta.incode.lsl
        - match: '\}'
          pop: true
        - include: infunc
  commentblock:
    - match: /\*
      push:
        - meta_scope: comment.block.lsl
        - match: \*/
          pop: true
  commentline:
    - match: (//).*$\n?
      scope: comment.line.double-slash.lsl
  constant:
    - match: \b(default|state)\b
      scope: constant.language.state.lsl
    - match: \b(TRUE|FALSE)\b
      scope: constant.language.integer.lsl
    - match: \b(NULL_KEY|EOF)\b
      scope: constant.language.string.lsl
  event:
    - match: ^\s*[@--$valid_events--@]\b
      captures:
        0: support.function.event.lsl
      push:
        - meta_scope: meta.event.lsl
        - match: '\}'
          captures:
            0: punctuation.definition.event.end.lsl
          pop: true
        - match: \(
          push:
            - meta_scope: meta.event.parameters.lsl
            - match: \)
              pop: true
            - include: inparam
        - match: '{'
          push:
            - meta_scope: meta.event.body.lsl
            - match: '(?=})'
              pop: true
            - include: infunc
        - include: commentblock
        - include: commentline
  flow_control:
    - match: \b(jump|return|if|else|for|do|while|@)\b
      scope: keyword.control.flow.lsl
  functiondef:
    - match: (?:\w+\s+)?(\w+)?\s*(?=\(.*?)
      captures:
        0: punctuation.definition.function.begin.lsl
        1: entity.name.function.lsl
      push:
        - meta_scope: meta.function.lsl
        - match: '}'
          captures:
            0: punctuation.definition.function.end.lsl
          pop: true
        - match: \(
          push:
            - meta_scope: meta.function.parameters.lsl
            - match: \)
              pop: true
            - include: inparam
        - match: '{'
          push:
            - meta_scope: meta.function.body.lsl
            - match: '(?=})'
              pop: true
            - include: infunc
        - include: commentblock
        - include: commentline
  infunc:
    - include: begin_end
    - include: commentblock
    - include: commentline
    - include: array
    - include: quoted
    - include: flow_control
    - include: constant
    - include: storage_type
    - include: llconstant
    - include: avoid
    - include: reserved
    - include: llfunction
    - include: number
    - include: operator
  inparam:
    - include: storage_type
    - include: commentblock
    - include: commentline
  llconstant:
    - match: '\b[@--$valid_constants_integer--@]\b'
      scope: constant.language.ll.integer.lsl
    - match: '\b[@--$valid_constants_string--@]\b'
      scope: constant.language.ll.string.lsl
    - match: '\b[@--$valid_constants_float--@]\b'
      scope: constant.language.ll.float.lsl
    - match: '\b[@--$valid_constants_compound--@]\b'
      scope: constant.language.ll.compound.lsl
  llfunction:
    - match: '\b[@--$valid_functions--@]\b'
      scope: support.function.ll.lsl
  number:
    - match: '\b(?i:(\d+\.\d*(e[\-\+]?\d+)?))(?=[^a-zA-Z_])'
      scope: constant.numeric.float.lsl
    - match: '(?<=[^0-9a-zA-Z_])(?i:(\.\d+(e[\-\+]?\d+)?))'
      scope: constant.numeric.float.lsl
    - match: '\b(?i:(\d+e[\-\+]?\d+))'
      scope: constant.numeric.float.lsl
    - match: \b(?i:(0x\h*))
      scope: constant.numeric.integer.hexadecimal.lsl
    - match: '\b(0[0-7]+)'
      scope: constant.numeric.integer.octal.lsl
    - match: '\b([1-9]+[0-9]*|0)'
      scope: constant.numeric.integer.decimal.lsl
  operator:
    - match: '[\=\+\-%&<>^|\*!~]'
      scope: keyword.operator.lsl
  quoted:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.lsl
      push:
        - meta_scope: string.quoted.double.lsl
        - match: '"'
          captures:
            0: punctuation.definition.string.end.lsl
          pop: true
        - match: '\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
          scope: constant.character.escape.lsl
  reserved:
    - match: \b(event|print)\b
      scope: variable.language.lsl
  state:
    - match: ^\s*((?:state)\s+\w+|default)\b
      captures:
        0: entity.name.class.state.begin.lsl
      push:
        - meta_scope: meta.state.lsl
        - match: '\}'
          captures:
            0: punctuation.definition.state.end.lsl
          pop: true
        - match: '{'
          push:
            - meta_scope: meta.state.body.lsl
            - match: '(?=})'
              pop: true
            - include: commentblock
            - include: commentline
            - include: event
        - include: commentblock
        - include: commentline
  storage_type:
    - match: \b(integer|float|string|key|vector|quaternion|rotation|list)\b
      scope: storage.type.lsl
  value:
    - include: commentblock
    - include: commentline
    - include: state
    - include: storage_type
    - include: quoted
    - include: constant
    - include: reserved
    - include: number
    - include: operator
    - include: array
    - include: functiondef
